<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Plattformsspel med portaler</title>
  <style>
    body { margin: 0; overflow: hidden; }
    canvas { background: #111; display: block; }
  </style>
</head>
<body>
<canvas id="gameCanvas" width="800" height="400"></canvas>
<audio id="bgm" loop autoplay>
  <source src="https://cdn.pixabay.com/audio/2023/03/01/audio_ee5e5584b1.mp3" type="audio/mpeg">
</audio>

<script>
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");
const music = document.getElementById("bgm");

const player = { x: 50, y: 300, width: 30, height: 30, color: "deepskyblue", dx: 0, dy: 0, grounded: false };
const gravity = 0.5;
const keys = {};
let score = 0;
let level = 0;
let portalVisible = false;
let portalPulse = 0;

document.addEventListener("keydown", (e) => keys[e.key] = true);
document.addEventListener("keyup", (e) => keys[e.key] = false);

// LEVELDATA (kan utökas)
const levels = Array.from({ length: 10 }, (_, i) => {
  const platforms = [
    { x: 0, y: 370, width: 800, height: 30 },
    { x: 150 + i * 10, y: 300 - i * 10, width: 100, height: 10 },
    { x: 350 + i * 5, y: 250 - i * 10, width: 100, height: 10 },
    { x: 550 - i * 10, y: 200 - i * 5, width: 100, height: 10 },
  ];
  const stars = platforms.slice(1).map(p => ({
    x: p.x + 20,
    y: p.y - 30,
    collected: false
  }));
  return { platforms, stars };
});

let currentPlatforms = [];
let currentStars = [];
let portal = { x: 0, y: 0, width: 30, height: 50 };

function loadLevel(num) {
  const l = levels[num];
  currentPlatforms = l.platforms;
  currentStars = l.stars.map(s => ({ ...s }));
  player.x = 50;
  player.y = 300;
  player.dy = 0;
  score = 0;
  portalVisible = false;
}

function update() {
  player.dx = 0;
  if (keys["ArrowLeft"]) player.dx = -3;
  if (keys["ArrowRight"]) player.dx = 3;
  if (keys[" "] && player.grounded) {
    if (level==2) {
        player.dy = -15;       
    } else {
        player.dy = -12;

    }
   
    player.grounded = false;
  }

  player.dy += gravity;
  player.x += player.dx;
  player.y += player.dy;

  // Kollision med plattformar
  player.grounded = false;
  currentPlatforms.forEach(p => {
    if (player.x < p.x + p.width &&
        player.x + player.width > p.x &&
        player.y + player.height < p.y + 10 &&
        player.y + player.height + player.dy >= p.y) {
      player.y = p.y - player.height;
      player.dy = 0;
      player.grounded = true;
    }
  });

  // Samla stjärnor
  currentStars.forEach(star => {
    if (!star.collected &&
        player.x < star.x + 20 &&
        player.x + player.width > star.x &&
        player.y < star.y + 20 &&
        player.y + player.height > star.y) {
      star.collected = true;
      score++;
    }
  });

  // Visa portal om alla stjärnor tagits
  if (currentStars.every(s => s.collected)) {
    if (!portalVisible) {
      portalVisible = true;
      const lastPlatform = currentPlatforms[currentPlatforms.length - 1];
      portal.x = lastPlatform.x + lastPlatform.width - 50;
      portal.y = lastPlatform.y - portal.height;
    }
  }

  // Gå in i portalen
  if (portalVisible &&
      player.x < portal.x + portal.width &&
      player.x + player.width > portal.x &&
      player.y < portal.y + portal.height &&
      player.y + player.height > portal.y) {
    if (level < levels.length - 1) {
      level++;
      loadLevel(level);
    } else {
      alert("Du klarade alla nivåer! Bra jobbat!");
      level = 0;
      loadLevel(level);
    }
  }
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // Spelare
  ctx.fillStyle = player.color;
  ctx.fillRect(player.x, player.y, player.width, player.height);

  // Plattformar
  ctx.fillStyle = "white";
  currentPlatforms.forEach(p => ctx.fillRect(p.x, p.y, p.width, p.height));

  // Stjärnor
  currentStars.forEach(star => {
    if (!star.collected) {
      ctx.fillStyle = "gold";
      ctx.beginPath();
      ctx.arc(star.x + 10, star.y + 10, 10, 0, Math.PI * 2);
      ctx.fill();
    }
  });

  // Portal
  if (portalVisible) {
    portalPulse += 0.1;
    const alpha = 0.6 + 0.4 * Math.sin(portalPulse);
    ctx.fillStyle = `rgba(0,200,255,${alpha})`;
    ctx.fillRect(portal.x, portal.y, portal.width, portal.height);
  }

  // Text
  ctx.fillStyle = "white";
  ctx.font = "20px Arial";
  ctx.fillText("Stjärnor: " + score, 10, 30);
  ctx.fillText("Nivå: " + (level + 1), 700, 30);
}

function loop() {
  update();
  draw();
  requestAnimationFrame(loop);
}

loadLevel(level);
loop();
</script>
</body>
</html>
