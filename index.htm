<!DOCTYPE html>
<html>

<head>


    <meta charset="utf-8" />
    <title>STAR * CATCHER</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
        }

        canvas {
            background: #111;
            display: block;
        }

        #gameOverScreen {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.85);
            color: white;
            text-align: center;
            padding-top: 100px;
            font-family: sans-serif;
            z-index: 1000;
        }

        #restartButton {
            font-size: 1.5em;
            padding: 10px 20px;
            background: gold;
            color: black;
            border: none;
            border-radius: 10px;
            cursor: pointer;
        }

        #confettiCanvas {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 999;
        }
    </style>
</head>

<body>
    <h1>STAR CATCHER</h1>
    <canvas id="gameCanvas" width="800" height="400"></canvas>

    <div id="gameOverScreen">
        <h1>Du klarade spelet! ðŸŽ‰</h1>
        <button id="restartButton">Spela igen</button>
    </div>

    <canvas id="confettiCanvas"></canvas>

    <audio id="winMusic">
        <source src="https://cdn.pixabay.com/download/audio/2023/06/08/audio_4a2a9070f0.mp3?filename=winner-171541.mp3"
            type="audio/mpeg">
    </audio>

    <audio id="bgm" loop autoplay>
        <source src="https://cdn.pixabay.com/audio/2023/03/01/audio_ee5e5584b1.mp3" type="audio/mpeg">
    </audio>

    <script>
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");
        const music = document.getElementById("bgm");

        const player = { x: 50, y: 300, width: 30, height: 30, color: "deepskyblue", dx: 0, dy: 0, grounded: false };
        const gravity = 0.5;
        const keys = {};
        let score = 0;
        let level = 0;
        let portalVisible = false;
        let portalPulse = 0;

        document.addEventListener("keydown", (e) => keys[e.key] = true);
        document.addEventListener("keyup", (e) => keys[e.key] = false);

        // LEVELDATA (kan utÃ¶kas)
        const levels = Array.from({ length: 10 }, (_, i) => {
            const platforms = [
                { x: 0, y: 370, width: 800, height: 30 },
                { x: 150 + i * 10, y: 300 - i * 10, width: 100, height: 10 },
                { x: 350 + i * 5, y: 250 - i * 10, width: 100, height: 10 },
                { x: 550 - i * 10, y: 200 - i * 5, width: 100, height: 10 },
            ];
            const stars = platforms.slice(1).map(p => ({
                x: p.x + 20,
                y: p.y - 30,
                collected: false
            }));
            return { platforms, stars };
        });

        let currentPlatforms = [];
        let currentStars = [];
        let portal = { x: 0, y: 0, width: 30, height: 50 };

        function loadLevel(num) {
            const l = levels[num];
            currentPlatforms = l.platforms;
            currentStars = l.stars.map(s => ({ ...s }));
            player.x = 50;
            player.y = 300;
            player.dy = 0;
            score = 0;
            portalVisible = false;
        }

        function update() {
            player.dx = 0;
            if (keys["ArrowLeft"]) player.dx = -3;
            if (keys["ArrowRight"]) player.dx = 3;
            if (keys["ArrowuP"] && player.grounded) {
                player.dy = -25;
            }
            if (keys[" "] && player.grounded) {
                if (level == 8 || level == 9) {
                    player.dy = -15;
                } else {
                    player.dy = -12;

                }

                player.grounded = false;
            }

            player.dy += gravity;
            player.x += player.dx;
            player.y += player.dy;

            // Kollision med plattformar
            player.grounded = false;
            currentPlatforms.forEach(p => {
                if (player.x < p.x + p.width &&
                    player.x + player.width > p.x &&
                    player.y + player.height < p.y + 10 &&
                    player.y + player.height + player.dy >= p.y) {
                    player.y = p.y - player.height;
                    player.dy = 0;
                    player.grounded = true;
                }
            });

            // Samla stjÃ¤rnor
            currentStars.forEach(star => {
                if (!star.collected &&
                    player.x < star.x + 20 &&
                    player.x + player.width > star.x &&
                    player.y < star.y + 20 &&
                    player.y + player.height > star.y) {
                    star.collected = true;
                    score++;
                }
            });

            // Visa portal om alla stjÃ¤rnor tagits
            if (currentStars.every(s => s.collected)) {
                if (!portalVisible) {
                    portalVisible = true;
                    const lastPlatform = currentPlatforms[currentPlatforms.length - 1];
                    portal.x = lastPlatform.x + lastPlatform.width - 50;
                    portal.y = lastPlatform.y - portal.height;
                }
            }

            // GÃ¥ in i portalen
            if (portalVisible &&
                player.x < portal.x + portal.width &&
                player.x + player.width > portal.x &&
                player.y < portal.y + portal.height &&
                player.y + player.height > portal.y) {
                if (level < levels.length - 1) {
                    level++;
                    loadLevel(level);
                } else {
                    showGameOver();
                    level = 0;
                    loadLevel(level);
                }
            }
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Spelare
            ctx.fillStyle = player.color;
            ctx.fillRect(player.x, player.y, player.width, player.height);

            // Plattformar
            ctx.fillStyle = "white";
            currentPlatforms.forEach(p => ctx.fillRect(p.x, p.y, p.width, p.height));

            // StjÃ¤rnor
            currentStars.forEach(star => {
                if (!star.collected) {
                    ctx.fillStyle = "gold";
                    ctx.beginPath();
                    ctx.arc(star.x + 10, star.y + 10, 10, 0, Math.PI * 2);
                    ctx.fill();
                }
            });

            // Portal
            if (portalVisible) {
                portalPulse += 0.1;
                const alpha = 0.6 + 0.4 * Math.sin(portalPulse);
                ctx.fillStyle = `rgba(0,200,255,${alpha})`;
                ctx.fillRect(portal.x, portal.y, portal.width, portal.height);
            }

            // Text
            ctx.fillStyle = "white";
            ctx.font = "20px Arial";
            ctx.fillText("StjÃ¤rnor: " + score, 10, 30);
            ctx.fillText("NivÃ¥: " + (level + 1), 700, 30);
        }

        function loop() {
            update();
            draw();
            requestAnimationFrame(loop);
        }

        loadLevel(level);
        loop();

        // Game over skÃ¤rm och konfetti
        const gameOverScreen = document.getElementById("gameOverScreen");
        const restartButton = document.getElementById("restartButton");
        const winMusic = document.getElementById("winMusic");
        const confettiCanvas = document.getElementById("confettiCanvas");
        const confettiCtx = confettiCanvas.getContext("2d");

        confettiCanvas.width = window.innerWidth;
        confettiCanvas.height = window.innerHeight;

        let confetti = [];
        let confettiInterval;

        function showGameOver() {
            gameOverScreen.style.display = "block";
            winMusic.play();
            launchConfetti();
        }

        function launchConfetti() {
            confettiCanvas.style.display = "block";
            confetti = Array.from({ length: 200 }, () => ({
                x: Math.random() * window.innerWidth,
                y: Math.random() * window.innerHeight - window.innerHeight,
                r: Math.random() * 6 + 4,
                d: Math.random() * 10 + 2,
                color: `hsl(${Math.random() * 360}, 100%, 50%)`
            }));

            confettiInterval = setInterval(() => {
                confettiCtx.clearRect(0, 0, confettiCanvas.width, confettiCanvas.height);
                confetti.forEach(p => {
                    confettiCtx.beginPath();
                    confettiCtx.arc(p.x, p.y, p.r, 0, Math.PI * 2);
                    confettiCtx.fillStyle = p.color;
                    confettiCtx.fill();
                    p.y += p.d;
                    if (p.y > window.innerHeight) p.y = -10;
                });
            }, 33);
        }

        function stopConfetti() {
            clearInterval(confettiInterval);
            confettiCtx.clearRect(0, 0, confettiCanvas.width, confettiCanvas.height);
            confettiCanvas.style.display = "none";
        }

        restartButton.addEventListener("click", () => {
            gameOverScreen.style.display = "none";
            winMusic.pause();
            winMusic.currentTime = 0;
            stopConfetti();
            level = 1;
            loadLevel(level);
        });


        // Ny bakgrund
        const backgroundCanvas = document.createElement("canvas");
        backgroundCanvas.width = canvas.width;
        backgroundCanvas.height = canvas.height;
        const bgCtx = backgroundCanvas.getContext("2d");

        function generateSpaceBackground() {
            // Fyll med mÃ¶rk rymdfÃ¤rg
            bgCtx.fillStyle = "#0a0a2a";
            bgCtx.fillRect(0, 0, backgroundCanvas.width, backgroundCanvas.height);

            // StjÃ¤rnor
            for (let i = 0; i < 150; i++) {
                const x = Math.random() * backgroundCanvas.width;
                const y = Math.random() * backgroundCanvas.height;
                const r = Math.random() * 1.5;
                bgCtx.fillStyle = "white";
                bgCtx.beginPath();
                bgCtx.arc(x, y, r, 0, Math.PI * 2);
                bgCtx.fill();
            }

            // Slumpade planeter
            for (let i = 0; i < 6; i++) {
                const x = Math.random() * backgroundCanvas.width;
                const y = Math.random() * backgroundCanvas.height;
                const radius = 20 + Math.random() * 40;
                const hue = Math.floor(Math.random() * 360);
                bgCtx.fillStyle = `hsl(${hue}, 80%, 60%)`;
                bgCtx.beginPath();
                bgCtx.arc(x, y, radius, 0, Math.PI * 2);
                bgCtx.fill();
            }
        }

        generateSpaceBackground(); // KÃ¶r bara en gÃ¥ng vid start



    </script>
</body>

</html>